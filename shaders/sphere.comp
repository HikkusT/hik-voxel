//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba16f,set = 0, binding = 0) uniform image2D image;

struct Sphere {
    vec3 center;
    float radius;
    vec3 color;
};

struct Camera {
    vec3 position;
    vec3 forward;
    vec3 up;
    vec3 right;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

bool hit(Ray ray, Sphere sphere);

vec3 calculateHitPoint(Ray ray, Sphere sphere);

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(image);
    vec2 normalizedPosition = 2.0 * (vec2(texelCoord) - size / 2.0) / float(size.x);

    Camera camera;
    camera.position = vec3(0.);
    camera.forward = vec3(1.0, 0., 0.);
    camera.up = vec3(0., 0., 1.);
    camera.right = vec3(0., -1., 0.);

    Sphere sphere;
    sphere.center = vec3(3.0, 0., 0.);
    sphere.radius = 1.;
    sphere.color = vec3(0.9373f, 0.2784f, 0.4353f);

    Ray ray;
    ray.origin = camera.position;
    ray.direction = camera.forward + normalizedPosition.x * camera.right + normalizedPosition.y * camera.up;

    vec3 sunDirection = normalize(vec3(-1., -1., -1.));
    vec3 shadowColor = 0.3 * vec3(0.1490f, 0.3294f, 0.4863f);

    if (hit(ray, sphere)) {
        vec3 normal = normalize(calculateHitPoint(ray, sphere) - sphere.center);
        vec3 color = mix(shadowColor, sphere.color, dot(normal, sunDirection));
        imageStore(image, texelCoord, vec4(color, 1.));
    } else {
        imageStore(image, texelCoord, vec4(vec3(1.0f, 0.8196f, 0.4f), 1.));
//        imageStore(image, texelCoord, vec4(0.5, 0., 0.25, 1.));
    }
}

bool hit(Ray ray, Sphere sphere) {
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, ray.origin - sphere.center);
    float c = dot(ray.origin - sphere.center, ray.origin - sphere.center) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;

    return discriminant > 0;
}

vec3 calculateHitPoint(Ray ray, Sphere sphere) {
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, ray.origin - sphere.center);
    float c = dot(ray.origin - sphere.center, ray.origin - sphere.center) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;

    float solution = (- b - sqrt(discriminant)) / (2. * a);

    return ray.origin + solution * ray.direction;
}