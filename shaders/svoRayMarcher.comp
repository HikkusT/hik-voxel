//GLSL version to use
#version 460
#extension GL_EXT_debug_printf : enable

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba16f,set = 0, binding = 0) uniform image2D image;

struct SvoNode {
    int LeafMask;
    int childrenOffsets[8];
};

layout(set = 0, binding = 1) buffer World {
    float voxelSize;
    int chunkSize;
    SvoNode data[];
} world;

layout(push_constant) uniform Constants {
    vec3 cameraPosition;
    vec3 cameraForward;
    vec3 cameraUp;
    //    vec3 cameraRight;
} constants;

struct Camera {
    vec3 position;
    vec3 forward;
    vec3 up;
    vec3 right;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

vec2 intersectAABB(Ray ray, vec3 boxMin, vec3 boxMax);
ivec2 getValueAt(ivec3 position);

vec3 calculateNormalAtAABBIntersection(vec3 hitPoint, vec3 boxMin, vec3 boxMax) {
    const float epsilon = 1e-5;
    vec3 normal = vec3(0.0);

    // Check which face was hit by comparing hitPoint to box bounds
    if (abs(hitPoint.x - boxMin.x) < epsilon) {
        normal = vec3(-1.0, 0.0, 0.0);  // Left face
    } else if (abs(hitPoint.x - boxMax.x) < epsilon) {
        normal = vec3(1.0, 0.0, 0.0);   // Right face
    } else if (abs(hitPoint.y - boxMin.y) < epsilon) {
        normal = vec3(0.0, -1.0, 0.0);  // Bottom face
    } else if (abs(hitPoint.y - boxMax.y) < epsilon) {
        normal = vec3(0.0, 1.0, 0.0);   // Top face
    } else if (abs(hitPoint.z - boxMin.z) < epsilon) {
        normal = vec3(0.0, 0.0, -1.0);  // Back face
    } else if (abs(hitPoint.z - boxMax.z) < epsilon) {
        normal = vec3(0.0, 0.0, 1.0);   // Front face
    }

    return normal;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(image);
    vec2 normalizedPosition = 2.0 * (vec2(texelCoord) - size / 2.0) / float(size.x);

    Camera camera;
    camera.position = constants.cameraPosition;
    camera.forward = constants.cameraForward;
    camera.up = constants.cameraUp;
    camera.right = cross(camera.up, camera.forward);

    Ray ray;
    ray.origin = camera.position;
    ray.direction = camera.forward + normalizedPosition.x * camera.right + normalizedPosition.y * camera.up;
    ray.direction = normalize(ray.direction);

    vec3 sunDirection = normalize(vec3(0, 1., -1.));
    vec3 shadowColor = 0.3 * vec3(0.1490f, 0.3294f, 0.4863f);

    vec3 intersectionPoint;

    vec3 minWorldBounds = vec3(0);
    vec3 maxWorldBounds = vec3(world.chunkSize * world.voxelSize);

    vec3 insideTest = step(minWorldBounds, ray.origin) - step(maxWorldBounds, ray.origin);
    if (all(greaterThanEqual(insideTest, vec3(0.8)))) {
        intersectionPoint = ray.origin;
    } else {
        vec2 intersectionResult = intersectAABB(ray, minWorldBounds, maxWorldBounds);
        if (intersectionResult.y < 0 || intersectionResult.x > intersectionResult.y) {
          imageStore(image, texelCoord, vec4(vec3(1.0f, 0.8196f, 0.4f), 1.));
//          imageStore(image, texelCoord, vec4(0.5f * (ray.direction + vec3(1)), 1.));
          return;
        }

        intersectionPoint = ray.origin + ray.direction * intersectionResult.x;
    }

//    imageStore(image, texelCoord, vec4(intersectionPoint / (world.voxelSize * world.chunkSize), 1.));
//    return;

    ivec3 gridPosition = clamp(ivec3(intersectionPoint / world.voxelSize), ivec3(0), ivec3(world.chunkSize - 1)); // Fixing precision problems
//    ivec3 steps = ivec3(sign(ray.direction));
//    ivec2 dataAtInitialPosition = getValueAt(gridPosition);
//    vec3 tMax = (vec3(gridPosition + max(steps, vec3(0.0))) * world.voxelSize - intersectionPoint) / ray.direction;
//    vec3 tDelta = abs(world.voxelSize / ray.direction);
    int iterations = 0;

    Ray raytracingRay;
    raytracingRay.origin = intersectionPoint;
    raytracingRay.direction = ray.direction;

//    imageStore(image, texelCoord, vec4(gridPosition / (1. * world.chunkSize), 1.));
//    return;

    vec3 debugColor = vec3(0);
    ivec3 lastGridPos = ivec3(-1);
    for (int i = 0; i < world.chunkSize * world.chunkSize * world.chunkSize; i++) {
        if (any(greaterThanEqual(gridPosition, vec3(world.chunkSize))) || any(lessThan(gridPosition, vec3(0)))) {
            imageStore(image, texelCoord, vec4(vec3(1.0f, 0.8196f, 0.4f), 1.));
//        imageStore(image, texelCoord, vec4(debugColor, 1.));
//            imageStore(image, texelCoord, mix(vec4(vec3(1.0f, 0.8196f, 0.4f), 1.), vec4(intersectionPoint / (world.voxelSize * world.chunkSize), 1.), 0.2));
//            imageStore(image, texelCoord, vec4(gridPosition / world.chunkSize, 1.));
//            imageStore(image, texelCoord, vec4(0.5f * (steps + vec3(1)), 1.));
            return;
        }

        ivec2 data = getValueAt(gridPosition);
        int voxelSizeAtPosition = data.y;
        vec3 minBounding = world.voxelSize * vec3((gridPosition / voxelSizeAtPosition) * voxelSizeAtPosition);
        vec3 maxBounding = world.voxelSize * vec3((gridPosition / voxelSizeAtPosition + ivec3(1)) * voxelSizeAtPosition);
        vec2 result = intersectAABB(ray, minBounding, maxBounding);

        debugColor += vec3(voxelSizeAtPosition / (1. * world.chunkSize)) * 0.1f;
        if (data.x > 0.1) {
//            imageStore(image, texelCoord, vec4(vec3(0.9373f, 0.2784f, 0.4353f), 1.));
//            imageStore(image, texelCoord, vec4(vec3(gridPosition / (1. * world.chunkSize)), 1.));
//            imageStore(image, texelCoord, vec4(vec3(iterations / 3.f), 1.));
//            imageStore(image, texelCoord, vec4(vec3(voxelSizeAtPosition / (1. * world.chunkSize)), 1.));
            vec3 hitPoint = ray.origin + ray.direction * result.x;  // Calculate intersection point
            vec3 normal = calculateNormalAtAABBIntersection(hitPoint, minBounding, maxBounding);

            vec3 color = mix(shadowColor, vec3(0.9373f, 0.2784f, 0.4353f), dot(-normal, sunDirection));
            imageStore(image, texelCoord, vec4(color, 1.));
//            imageStore(image, texelCoord, vec4(voxelSizeAtPosition / (1. * world.chunkSize), 0, 0, 1.));
//            imageStore(image, texelCoord, vec4(color, 1.));
//            imageStore(image, texelCoord, mix(vec4(color, 1.), vec4(intersectionPoint / (world.voxelSize * world.chunkSize), 1.), 0.2));
            return;
        }

//        imageStore(image, texelCoord, vec4(((gridPosition / voxelSizeAtPosition + ivec3(1)) * voxelSizeAtPosition) / (1. * world.chunkSize), 1.));
//        return;

        if (result.y < 0 || result.x > result.y) {
            imageStore(image, texelCoord, vec4(1, iterations / 3.f, 1, 1.));
//            debugPrintfEXT("Unexpected AABB test. Iteration %d. Test is running on gridPosition (%d, %d, %d) so testing from (%f, %f, %f) to (%f, %f, %f) and results are tNear = %f tFar = %f", iterations, gridPosition.x, gridPosition.y, gridPosition.z, minBounding.x, minBounding.y, minBounding.z, maxBounding.x, maxBounding.y, maxBounding.z, result.x, result.y);
            return;
        }
        lastGridPos = gridPosition;
        gridPosition = ivec3(floor((ray.origin + (result.y + 0.001f) * ray.direction) / world.voxelSize));

        if (gridPosition == lastGridPos) {
            imageStore(image, texelCoord, vec4(0, 0, 1, 1));
            return;
        }


//        vec3 tMax = (vec3(gridPosition + max(steps * voxelSizeAtPosition, vec3(0.0))) * world.voxelSize - intersectionPoint) / ray.direction;
//        if(tMax.x < tMax.y) {
//            if(tMax.x < tMax.z) {
////                gridPosition.x += steps.x * voxelSizeAtPosition;
//                gridPosition.x = ((gridPosition.x + voxelSizeAtPosition * steps.x) / voxelSizeAtPosition) * voxelSizeAtPosition;
//                tMax.x += tDelta.x * voxelSizeAtPosition;
//                normal = vec3(-steps.x, 0, 0);
//            } else {
//                gridPosition.z += ((gridPosition.z + voxelSizeAtPosition * steps.z) / voxelSizeAtPosition) * voxelSizeAtPosition;
//                tMax.z += tDelta.z * voxelSizeAtPosition;
//                normal = vec3(0, 0, -steps.z);
//            }
//        } else {
//            if (tMax.y < tMax.z) {
////                gridPosition.y += steps.y * voxelSizeAtPosition;
//                gridPosition.y += ((gridPosition.y + voxelSizeAtPosition * steps.y) / voxelSizeAtPosition) * voxelSizeAtPosition;
//                tMax.y += tDelta.y * voxelSizeAtPosition;
//                normal = vec3(0, -steps.y, 0);
//            } else {
//                gridPosition.z += ((gridPosition.z + voxelSizeAtPosition * steps.z) / voxelSizeAtPosition) * voxelSizeAtPosition;
//                tMax.z += tDelta.z * voxelSizeAtPosition;
//                normal = vec3(0, 0, -steps.z);
//            }
//        }

        iterations++;
    }

    imageStore(image, texelCoord, vec4(0, 1, 0, 1));
    return;
}

// Adapted from https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
vec2 intersectAABB(Ray ray, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - ray.origin) / ray.direction;
    vec3 tMax = (boxMax - ray.origin) / ray.direction;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);

    return vec2(tNear, tFar);
};

ivec2 getValueAt(ivec3 position) {
    ivec3 currentSearch = ivec3(0);
    int currentSize = world.chunkSize;
    int currentLinearIndex = 0;

    while (currentSize > 1) {
        currentSize = currentSize / 2;
        ivec3 offset = position - currentSearch;

        int index = 0;
        if (offset.x >= currentSize) index |= 1; // 1st bit (X axis)
        if (offset.y >= currentSize) index |= 2; // 2nd bit (Y axis)
        if (offset.z >= currentSize) index |= 4; // 3rd bit (Z axis)

        if ((world.data[currentLinearIndex].LeafMask & (1 << index)) != 0) {
            return ivec2(world.data[currentLinearIndex].childrenOffsets[index], currentSize);
        }

        currentSearch += ivec3(
            (index & 1) != 0 ? currentSize : 0,
            (index & 2) != 0 ? currentSize : 0,
            (index & 4) != 0 ? currentSize : 0
        );
        currentLinearIndex += world.data[currentLinearIndex].childrenOffsets[index];
    }

    return ivec2(1, 1);

//auto currentSearch = glm::ivec3(0);
//int currentSize = _worldSize;
//int currentLinearIndex = 0;
//
//while (currentSize > 1) {
//currentSize = currentSize / 2;
//glm::ivec3 offset = position - currentSearch;
//
//int index = 0;
//if (offset.x >= currentSize) index |= 1; // 1st bit (X axis)
//if (offset.y >= currentSize) index |= 2; // 2nd bit (Y axis)
//if (offset.z >= currentSize) index |= 4; // 3rd bit (Z axis)
//
//if (_linearizedSvo[currentLinearIndex].LeafMask & (1 << index)) {
//return _linearizedSvo[currentLinearIndex].childrenOffsets[index];
//}
//
//// Move to the child node's position
//currentSearch += glm::ivec3(
//(index & 1) ? currentSize : 0,
//(index & 2) ? currentSize : 0,
//(index & 4) ? currentSize : 0
//);
//currentLinearIndex += _linearizedSvo[currentLinearIndex].childrenOffsets[index];
//}
}
